{"version":3,"sources":["myHooks/redux.ts","components/CityWeatherForm/CityWeatherForm.tsx","store/reducers/ActionCreators.ts","store/reducers/CitySlice.ts","components/InputComplete/InputComplete.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","components/InputComplete/InputComplete.module.css","components/CityWeatherForm/CityWeatherForm.module.css"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","CityWeatherForm","props","disable","state","cityReducer","degrees","deg","result","Math","round","className","style","city","name","temp","src","img","alt","humidity","pressure","wind","color","time","Button","size","variant","disabled","onClick","deleteSelectedCity","id","updateCity","React","memo","fetchCities","createAsyncThunk","value","thunkAPI","a","axios","get","response","data","rejectWithValue","fetchWeatherCities","newName","country","fetchUpdateCity","item","citySlice","createSlice","initialState","listCities","isLoading","error","selectValue","general","check","reducers","inputValue","action","payload","russianName","setLocalStorage","deleteCity","index","findIndex","el","splice","extraReducers","fulfilled","type","pending","rejected","filter","length","moment","format","nameRu","push","InputComplete","dispatch","autocomplete","Autocomplete","sx","display","width","fontSize","height","marginTop","marginRight","bgcolor","border","borderRadius","theme","palette","getContrastText","background","paper","options","Object","values","noOptionsText","paddingRight","getOptionLabel","option","full_name","isOptionEqualToValue","onInputChange","event","replace","actions","renderInput","params","ref","InputProps","placeholder","inputProps","updateAll","updateAllCity","App","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","needName","useCallback","needIndex","i","LinearProgress","Alert","severity","map","main","speed","weather","icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8bac8607.chunk.js","sourcesContent":["import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {AppDispatch, RootState} from '../store/store';\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import {Button} from '@mui/material';\r\nimport React, {FC} from 'react';\r\nimport {useAppSelector} from '../../myHooks/redux';\r\nimport style from './CityWeatherForm.module.css'\r\n\r\n\r\nexport interface cityWeatherForm {\r\n    id: number\r\n    index: number\r\n    name: string\r\n    temp: number\r\n    time: string\r\n    humidity: number\r\n    pressure: number\r\n    wind: number\r\n    deg: number\r\n    img: string\r\n    updateCity: (id: number) => void\r\n    deleteSelectedCity: (id: number) => void\r\n}\r\n\r\nconst CityWeatherForm: FC<cityWeatherForm> = (props) => {\r\n    const {disable} = useAppSelector(state => state.cityReducer)\r\n    let degrees = props.deg;\r\n    const directions = ['🡻', '🡿', '🡸', '🡼', '🡹', '🡽', '🡺', '🡾'];\r\n    degrees = degrees * 8 / 360;\r\n    degrees = Math.round(degrees);\r\n    degrees = (degrees + 8) % 8\r\n    const result = directions[degrees]\r\n    return (\r\n        <div className={style.city}>\r\n            <h3>Город: {props.name} </h3>\r\n            <p>Температура: {Math.round(props.temp - 273)}℃ <img\r\n                src={`https://openweathermap.org/img/w/${props.img}.png`} alt=\"icon\"/></p>\r\n            <p>Влажность: {props.humidity}%</p>\r\n            <p>Атмосферное давление: {props.pressure}</p>\r\n            <p>Сила и направление ветра: {props.wind} м/с <span style={{color: '#d32f2f'}}>{result}</span></p>\r\n            <p>Последнее обновление данных: {props.time}  </p>\r\n            <Button size=\"small\" variant=\"contained\" color=\"error\" disabled={disable}\r\n                    onClick={() => props.deleteSelectedCity(props.id)}>Удалить</Button> <span> </span>\r\n            <Button size=\"small\" variant=\"contained\" color=\"success\" disabled={disable}\r\n                    onClick={() => props.updateCity(props.id)}>Обновить</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(CityWeatherForm);\r\n","import axios from 'axios';\r\nimport {Cities} from '../../templates/Cities';\r\nimport {createAsyncThunk} from '@reduxjs/toolkit';\r\n\r\nexport const fetchCities = createAsyncThunk(\r\n    'city/fetchAll',\r\n    async (value: string, thunkAPI) => {\r\n        try {\r\n            const response = await axios.get<Cities[]>(`https://htmlweb.ru/geo/api.php?json&city_name=${value}&api_key=c0ce976f81633aafb700594fe97582e6`)\r\n            return response.data\r\n        } catch (e) {\r\n            return thunkAPI.rejectWithValue('Ошибка сервера')\r\n        }\r\n\r\n    }\r\n)\r\nexport const fetchWeatherCities = createAsyncThunk(\r\n    'city/fetch',\r\n    async (newName: any, thunkAPI) => {\r\n        try {\r\n            const response = await axios.get<Cities[]>(`https://api.openweathermap.org/data/2.5/weather?q=${newName.name},${newName.country}&appid=634d06f1747beb716b919ed5b586d4d0`)\r\n            return response.data;\r\n        } catch (e) {\r\n            return thunkAPI.rejectWithValue('Сервис не может найти город, введите название другого города')\r\n        }\r\n\r\n    }\r\n)\r\n\r\nexport const fetchUpdateCity = createAsyncThunk(\r\n    'city/fetchUpdate',\r\n    async (item: any, thunkAPI) => {\r\n        try {\r\n            const response = await axios.get<Cities[]>(`https://api.openweathermap.org/data/2.5/weather?id=${item.id}&appid=634d06f1747beb716b919ed5b586d4d0`)\r\n            return response.data;\r\n        } catch (e) {\r\n            return thunkAPI.rejectWithValue('Сервис не может найти город, введите название другого города')\r\n        }\r\n\r\n    }\r\n)\r\n","import {Cities, General, Values} from '../../templates/Cities';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {fetchCities, fetchUpdateCity, fetchWeatherCities} from './ActionCreators';\r\nimport moment from 'moment';\r\n\r\ninterface CityState {\r\n    listCities: Cities[],\r\n    value: string,\r\n    isLoading: boolean,\r\n    error: string,\r\n    selectValue: General[],\r\n    general: [],\r\n    check: Values[],\r\n    disable: boolean,\r\n    name: string,\r\n\r\n\r\n}\r\n\r\nconst initialState: CityState = {\r\n    listCities: [],\r\n    value: ' ',\r\n    isLoading: false,\r\n    error: '',\r\n    selectValue: [],\r\n    general: [],\r\n    check: [],\r\n    disable: false,\r\n    name: ''\r\n\r\n}\r\nexport const citySlice = createSlice({\r\n    name: 'city',\r\n    initialState,\r\n    reducers: {\r\n        inputValue(state, action: PayloadAction<string>) {\r\n            state.value = action.payload\r\n        }\r\n        ,\r\n        russianName(state, action: PayloadAction<string>) {\r\n            state.name = action.payload\r\n        },\r\n\r\n        setLocalStorage(state, action: PayloadAction<[]>) {\r\n            state.selectValue = action.payload\r\n        },\r\n        deleteCity(state, action: PayloadAction<number>) {\r\n            state.disable = true\r\n            const index = state.selectValue.findIndex((el) => el.id === action.payload)\r\n            state.selectValue.splice(index, 1)\r\n            state.disable = false\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchCities.fulfilled.type]: (state, action: PayloadAction<[]>) => {\r\n            state.isLoading = false;\r\n            state.disable = false\r\n            state.error = ''\r\n            state.listCities = []\r\n            state.listCities = action.payload;\r\n\r\n        },\r\n        [fetchCities.pending.type]: (state) => {\r\n            state.isLoading = true;\r\n            state.error = '';\r\n\r\n        },\r\n\r\n        [fetchCities.rejected.type]: (state, action: PayloadAction<string>) => {\r\n            state.isLoading = false\r\n            state.disable = false\r\n            state.error = action.payload\r\n        },\r\n\r\n\r\n        [fetchWeatherCities.fulfilled.type]: (state, action: PayloadAction<Values>) => {\r\n            state.isLoading = false;\r\n            state.disable = false;\r\n            state.error = '';\r\n            state.listCities = []\r\n            state.value = ''\r\n            const filter = state.selectValue.filter((el) => el.id === action.payload.id)\r\n            if (filter.length === 0) {\r\n                action.payload.time = moment().format('MM-DD-YYYY HH:mm:ss')\r\n                action.payload.nameRu = state.name\r\n                state.selectValue.push(action.payload)\r\n            }\r\n        },\r\n        [fetchWeatherCities.pending.type]: (state) => {\r\n            state.isLoading = true;\r\n            state.disable = true;\r\n            state.error = ''\r\n        },\r\n        [fetchWeatherCities.rejected.type]: (state, action: PayloadAction<string>) => {\r\n            state.isLoading = false\r\n            state.disable = false\r\n            state.listCities = []\r\n            state.value = ''\r\n            state.error = action.payload\r\n        },\r\n\r\n\r\n        [fetchUpdateCity.fulfilled.type]: (state, action: PayloadAction<Values>) => {\r\n            state.isLoading = false;\r\n            state.disable = false;\r\n            state.error = '';\r\n            action.payload.time = moment().format('MM-DD-YYYY HH:mm:ss')\r\n            const index = state.selectValue.findIndex(el => el.id === action.payload.id)\r\n            action.payload.nameRu = state.selectValue[index].nameRu\r\n            state.selectValue[index] = action.payload\r\n\r\n        },\r\n        [fetchUpdateCity.pending.type]: (state) => {\r\n            state.isLoading = true;\r\n            state.disable = true;\r\n            state.error = ''\r\n        },\r\n        [fetchUpdateCity.rejected.type]: (state, action: PayloadAction<string>) => {\r\n            state.isLoading = false\r\n            state.disable = false\r\n            state.error = action.payload\r\n        },\r\n\r\n    }\r\n})\r\n\r\n\r\nexport default citySlice.reducer;","import * as React from 'react';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport {Button} from '@mui/material';\r\nimport {useAppDispatch, useAppSelector} from '../../myHooks/redux';\r\nimport {citySlice} from '../../store/reducers/CitySlice';\r\nimport style from './InputComplete.module.css'\r\nimport {FC} from 'react';\r\n\r\ninterface Input {\r\n    updateAllCity: () => void\r\n}\r\n\r\nconst InputComplete: FC<Input> = (props) => {\r\n\r\n    const {disable} = useAppSelector(state => state.cityReducer)\r\n    const dispatch = useAppDispatch();\r\n    const {listCities, value} = useAppSelector(state => state.cityReducer)\r\n    return (\r\n        <div className={style.autocomplete}>\r\n            <Autocomplete\r\n                sx={{\r\n                    display: 'inline-block',\r\n                    '& input': {\r\n                        width: 350,\r\n                        fontSize: 16,\r\n                        height: 47,\r\n                        marginTop: 3,\r\n                        marginRight: 2,\r\n                        bgcolor: 'background.paper',\r\n                        border: '3px solid #D9DADF',\r\n                        borderRadius: 2,\r\n                        color: (theme) =>\r\n                            theme.palette.getContrastText(theme.palette.background.paper),\r\n                    },\r\n\r\n                }}\r\n                id=\"input-demo\"\r\n                options={Object.values(listCities)}\r\n                noOptionsText={<span style={{color: 'red', fontSize: 18}}><span\r\n                    style={{fontSize: 35, paddingRight: 20}}>⚠</span>Поле ввода принимает: «A-z» «A-я» «space» « , »\r\n                « () » « - » </span>}\r\n                getOptionLabel={(option) => option.full_name || ' '}\r\n                inputValue={value}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                onInputChange={(event, value) => {\r\n                    if (!value.replace(/[A-Za-zA-Яа-яЕе/' (),-]/g, '')) {\r\n                        dispatch(citySlice.actions.inputValue(value))\r\n                    }\r\n                }}\r\n                renderInput={(params) => (\r\n                    <div ref={params.InputProps.ref}>\r\n                        <input placeholder={'название города'}\r\n                               type=\"text\"  {...params.inputProps} />\r\n\r\n                    </div>\r\n                )}\r\n            />\r\n            <div className={style.updateAll}>\r\n                <Button variant=\"contained\" color=\"success\" size={'large'} onClick={props.updateAllCity}\r\n                        disabled={disable}>\r\n                    Обновить все города\r\n                </Button>\r\n\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nexport default React.memo(InputComplete);","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport CityWeatherForm from './components/CityWeatherForm/CityWeatherForm'\nimport InputComplete from './components/InputComplete/InputComplete';\nimport {useAppDispatch, useAppSelector} from './myHooks/redux';\nimport {fetchCities, fetchUpdateCity, fetchWeatherCities} from './store/reducers/ActionCreators';\nimport {citySlice} from './store/reducers/CitySlice';\nimport {Alert, LinearProgress,} from '@mui/material';\n\n\nfunction App() {\n\n    const dispatch = useAppDispatch();\n    const {value, error, isLoading, listCities, selectValue} = useAppSelector(state => state.cityReducer)\n\n    useEffect(() => {\n        const data = localStorage.getItem('cities');\n        if (data) {\n            dispatch(citySlice.actions.setLocalStorage(JSON.parse(data)))\n        }\n    }, [dispatch])  //LocalStorage getItem\n    useEffect(() => {\n        localStorage.setItem('cities', JSON.stringify(selectValue));\n    }, [selectValue])  //LocalStorage setItem\n\n\n    useEffect(() => {\n        if (value.length > 2 && value.length < 20) {\n            dispatch(fetchCities(value))\n        }\n    }, [value, dispatch])\n\n\n    useEffect(() => {\n        const needName = Object.values(listCities).filter(el => el.full_name === value);\n        const newName = {...needName[0]}\n        if (newName.full_name) {\n            dispatch(fetchWeatherCities(newName))\n            dispatch(citySlice.actions.russianName(newName.name))\n        }\n    }, [value, dispatch, listCities])\n\n\n    const updateCity = useCallback((id: number) => {\n        const needIndex = selectValue.findIndex(el => el.id === id);\n        const item = selectValue[needIndex]\n        dispatch(fetchUpdateCity(item))\n    }, [dispatch, selectValue])\n\n    const updateAllCity = useCallback(() => {\n        for (let i = 0; i < selectValue.length; i++) {\n            dispatch(fetchUpdateCity(selectValue[i]))\n        }\n    }, [dispatch, selectValue])\n\n    const deleteSelectedCity = useCallback((id: number) => {\n        dispatch(citySlice.actions.deleteCity(id))\n    }, [dispatch])\n\n    return (\n        <div className={'App'}>\n            <div className={'header'}>\n                {isLoading && <LinearProgress color=\"success\"/>}\n                {error && <h1><Alert variant=\"filled\" severity=\"error\">\n                    Сервис не может найти город, пожалуйста введите название другого города!\n                </Alert></h1>}\n                <InputComplete updateAllCity={updateAllCity}/>\n            </div>\n            <div className={'city-block'}>\n                {selectValue.map((el, index) => <CityWeatherForm key={el.id} id={el.id} index={index}\n                                                                 name={el.nameRu} time={el.time}\n                                                                 temp={el.main.temp} humidity={el.main.humidity}\n                                                                 pressure={el.main.pressure} wind={el.wind.speed}\n                                                                 deg={el.wind.deg}\n                                                                 img={el.weather[0].icon} updateCity={updateCity}\n                                                                 deleteSelectedCity={deleteSelectedCity}\n                />)}\n            </div>\n        </div>\n\n    );\n}\n\n\nexport default React.memo(App);\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, configureStore} from '@reduxjs/toolkit';\r\nimport cityReducer from './reducers/CitySlice'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    cityReducer\r\n})\r\nexport const setupStore = () => {\r\n    return configureStore({\r\n        reducer: rootReducer\r\n    })\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type AppStore = ReturnType<typeof setupStore>\r\nexport type AppDispatch = AppStore['dispatch']","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {setupStore} from './store/store';\nconst store = setupStore()\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autocomplete\":\"InputComplete_autocomplete__3OvwS\",\"updateAll\":\"InputComplete_updateAll__2LJYq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"city\":\"CityWeatherForm_city__4ZOJx\"};"],"sourceRoot":""}